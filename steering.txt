#include <Servo.h>

Servo myservo;

void setup() {
  myservo.attach(9);
}

void loop() {
  myservo.write(90); 
   
  myservo.write(0);
  
  myservo.write(90); 
   
}

#include <wiringPi.h>

#define SERVO_PIN 1 
#define PWM_RANGE 2000 
#define PWM_FREQ 50 // PWM频率

void setup() {
    wiringPiSetup(); // 初始化wiringPi库
    pinMode(SERVO_PIN, PWM_OUTPUT); // 设置引脚为PWM输出模式
    pwmSetMode(PWM_MODE_MS); // 设置PWM模式为马尔可夫模式（Mark-Space Mode）
    pwmSetRange(PWM_RANGE); // 设置PWM范围
    pwmSetClock(192); // 设置PWM时钟，PWM频率 = 19.2MHz / 192 / PWM_RANGE
}

void loop() {
    // 计算舵机在不同角度时对应的PWM占空比
    int pwm_min = 60; // 舵机最小PWM占空比
    int pwm_max = 240; // 舵机最大PWM占空比
    int angle_min = 0; // 舵机最小角度
    int angle_max = 180; // 舵机最大角度
    int pwm_mid = (pwm_min + pwm_max) / 2; // 舵机中间PWM占空比
    int angle_mid = (angle_min + angle_max) / 2; // 舵机中间角度
    int pwm_range = pwm_max - pwm_mid; // PWM占空比范围
    int angle_range = angle_max - angle_mid; // 角度范围

    // 控制舵机旋转180度
    for (int i = 0; i <= 180; i++) {
        int pwm_value = pwm_mid + ((i - angle_mid) * pwm_range) / angle_range;
        pwmWrite(SERVO_PIN, pwm_value);
        
    }

   
   

    // 控制舵机旋转回原来的位置
    for (int i = 180; i >= 0; i--) {
        int pwm_value = pwm_mid + ((i - angle_mid) * pwm_range) / angle_range;
        pwmWrite(SERVO_PIN, pwm_value);
        
    }

    
   
}

int main() {
    setup();
    while (true) {
        loop();
    }
    return 0;
}
2.
#include <Servo.h>

Servo myservo;

// 定义变量
int pos = 0; // 舵机当前位置
int increment = 1; // 舵机每次移动的步长
int interval = 20; // 两次移动之间的时间间隔，单位是毫秒
unsigned long previousMillis = 0; // 上一次移动的时间，单位是毫秒
unsigned long duration = 5000; // 移动总时间，单位是毫秒

void setup() {
  myservo.attach(9); // 将舵机连接到数字引脚 9
}

void loop() {
  unsigned long currentMillis = millis(); // 获取当前时间
  if (currentMillis - previousMillis >= interval) { // 判断是否到了移动时间
    previousMillis = currentMillis;
    pos += increment;
    if (pos >= 180 || pos <= 0) { // 判断是否到达边界
      increment = -increment; // 反向移动
    }
    myservo.write(pos); // 控制舵机
  }

  if (currentMillis >= duration) { // 判断是否到达总时间
    myservo.detach(); // 停止舵机运动
    while (true); // 无限循环，程序将卡死在这里
  }
}